import {
	AlertDialog,
	AlertDialogBody,
	AlertDialogContent,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogOverlay,
	Box,
	Button,
	Container,
	HStack,
	Heading,
	VStack,
	Wrap,
	WrapItem,
	chakra,
	useDisclosure,
} from "@chakra-ui/react";
import { AddTeamIcon, Coffee02Icon, Share01Icon } from "hugeicons-react";
import type { NextPage } from "next";
import Head from "next/head";
import { useRef, useState } from "react";
import { Card } from "../components/Card";

const Div = chakra("div");

const CARD_VALUES = [0, 1, 2, 3, 5, 8, 13, 21, "?", "☕"] as const;
type CardValue = (typeof CARD_VALUES)[number];

const NAMES = [
	"Alice",
	"Bob",
	"Charlie",
	"Dave",
	"Eve",
	"Frank",
	"Grace",
	"Henry",
	"Ivy",
	"Jack",
	"Kelly",
	"Liam",
	"Mia",
	"Noah",
	"Olivia",
	"Peter",
	"Quinn",
	"Ruby",
	"Sam",
	"Tara",
	"Uma",
	"Victor",
	"Wendy",
	"Xander",
	"Yuki",
	"Zoe",
] as const;

const getRandomName = (): string => {
	const randomIndex = Math.floor(Math.random() * NAMES.length);
	return NAMES[randomIndex];
};

interface CardType {
	id: string;
	value: CardValue;
	isOpen: boolean;
	name: string;
	isSorted: boolean;
}

const calculateStats = (cards: CardType[]) => {
	const numericValues = cards
		.filter((card) => typeof card.value === "number")
		.map((card) => card.value as number);

	if (numericValues.length === 0) return null;

	const average =
		numericValues.reduce((a, b) => a + b, 0) / numericValues.length;
	const sorted = [...numericValues].sort((a, b) => a - b);
	const median =
		sorted.length % 2 === 0
			? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2
			: sorted[Math.floor(sorted.length / 2)];
	const max = Math.max(...numericValues);

	return {
		average: average.toFixed(1),
		median: median.toFixed(1),
		max: max.toString(),
	};
};

const Home: NextPage = () => {
	const [cards, setCards] = useState<CardType[]>([]);
	const [isSorting, setIsSorting] = useState(false);
	const { isOpen, onOpen, onClose } = useDisclosure();
	const cancelRef = useRef<HTMLButtonElement>(null);

	const handleAddCard = (selectedValue: CardValue) => {
		const newCard: CardType = {
			id: `card-${Date.now()}`,
			value: selectedValue,
			isOpen: false,
			name: getRandomName(),
			isSorted: false,
		};
		setCards((prev) => [...prev, newCard]);
	};

	const sortCards = () => {
		setIsSorting(true);
		const sortedCards = [...cards]
			.sort((a, b) => {
				if (typeof a.value === "number" && typeof b.value === "number") {
					return a.value - b.value;
				}
				if (typeof a.value === "number") return -1;
				if (typeof b.value === "number") return 1;
				return 0;
			})
			.map((card) => ({ ...card, isOpen: true }));

		// アニメーション完了までの時間を延長
		setTimeout(() => {
			setIsSorting(false);
		}, 900); // アニメーション時間 + 余裕を持たせた時間

		setCards(sortedCards);
	};

	const handleOpenAll = () => {
		let delay = 0;
		cards.forEach((card, index) => {
			setTimeout(() => {
				setCards((prev) =>
					prev.map((c) => (c.id === card.id ? { ...c, isOpen: true } : c)),
				);
				// 最後のカードが開いた後にソートを実行
				if (index === cards.length - 1) {
					setTimeout(() => {
						const sortedCards = [...cards]
							.sort((a, b) => {
								// 数値同士の比較
								if (
									typeof a.value === "number" &&
									typeof b.value === "number"
								) {
									return a.value - b.value;
								}
								// 数値を文字列より前に
								if (typeof a.value === "number") return -1;
								if (typeof b.value === "number") return 1;
								// ☕を最後に
								if (a.value === "☕") return 1;
								if (b.value === "☕") return -1;
								// ?を☕の前に
								if (a.value === "?") return -1;
								if (b.value === "?") return 1;
								// ここまでこない（型安全のため）
								return 0;
							})
							.map((card) => ({
								...card,
								isOpen: true,
								isSorted: true,
							}));
						setCards(sortedCards);
					}, 500);
				}
			}, delay);
			delay += 50;
		});
	};

	const handleReset = () => {
		setCards([]);
		onClose();
	};

	const stats = calculateStats(cards.filter((card) => card.isOpen));

	return (
		<>
			<Head>
				<title>Planning Poker</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Container
				minH="100vh"
				maxW="container.lg"
				bg="white"
				p={0}
				display="flex"
				flexDirection="column"
			>
				<Box
					py={2}
					px={8}
					display="flex"
					justifyContent="space-between"
					alignItems="center"
				>
					<Heading color="brand.500" size="lg">
						Planning Poker
					</Heading>
					<HStack spacing={2}>
						<Button
							leftIcon={<AddTeamIcon size={20} />}
							colorScheme="brand"
							variant="ghost"
							size="sm"
							onClick={() => {
								// TODO: 招待機能の実装
								console.log("Invite team members");
							}}
						>
							Invite
						</Button>
						<Button
							leftIcon={<Share01Icon size={20} />}
							colorScheme="brand"
							variant="ghost"
							size="sm"
							onClick={() => {
								navigator.clipboard.writeText(window.location.href);
							}}
						>
							Share
						</Button>
					</HStack>
				</Box>

				<Box px={8} flex="1" display="flex" flexDirection="column" pb="120px">
					<VStack spacing="6" flex="1" align="stretch">
						<Box>
							<HStack spacing={4} justify="center">
								<Button
									onClick={handleOpenAll}
									isDisabled={cards.length === 0}
									colorScheme="brand"
									size="md"
									width="140px"
								>
									Open
								</Button>
								<Button
									onClick={onOpen}
									isDisabled={cards.length === 0}
									colorScheme="red"
									variant="outline"
									size="md"
									width="140px"
								>
									Reset
								</Button>
							</HStack>

							<HStack spacing={12} justify="center" mt={6} mb={4}>
								<Box textAlign="center" minW="100px">
									<Box fontSize="md" color="gray.500" mb={2}>
										Average
									</Box>
									<Box fontSize="3xl" fontWeight="bold" color="brand.500">
										{stats?.average ?? "-"}
									</Box>
								</Box>
								<Box textAlign="center" minW="100px">
									<Box fontSize="md" color="gray.500" mb={2}>
										Median
									</Box>
									<Box fontSize="3xl" fontWeight="bold" color="brand.500">
										{stats?.median ?? "-"}
									</Box>
								</Box>
								<Box textAlign="center" minW="100px">
									<Box fontSize="md" color="gray.500" mb={2}>
										Max
									</Box>
									<Box fontSize="3xl" fontWeight="bold" color="brand.500">
										{stats?.max ?? "-"}
									</Box>
								</Box>
							</HStack>
						</Box>

						<Box flex="1">
							<Box
								sx={{
									display: "grid",
									gridTemplateColumns: {
										base: "repeat(4, 60px)",
										md: "repeat(6, 60px)",
									},
									gap: "1rem",
									justifyContent: "center",
									maxWidth: {
										base: "calc(60px * 4 + 1rem * 3)",
										md: "calc(60px * 6 + 1rem * 5)",
									},
									margin: "0 auto",
								}}
							>
								{cards.map((card) => (
									<Card
										key={card.id}
										id={card.id}
										value={card.value}
										isOpen={card.isOpen}
										name={card.name}
										isSorted={card.isSorted}
									/>
								))}
							</Box>
						</Box>
					</VStack>
				</Box>

				<Box
					position="fixed"
					bottom={0}
					left={0}
					right={0}
					bg="white"
					p={4}
					zIndex={1}
				>
					<Container maxW="container.lg">
						<Wrap spacing={2} justify="center">
							{CARD_VALUES.map((value) => (
								<WrapItem key={value}>
									<Button
										onClick={() => handleAddCard(value)}
										size="md"
										colorScheme="brand"
										variant="outline"
										w="16"
										h="12"
										fontSize="xl"
									>
										{value === "☕" ? (
											<Coffee02Icon color="currentColor" />
										) : (
											value
										)}
									</Button>
								</WrapItem>
							))}
						</Wrap>
					</Container>
				</Box>
			</Container>

			<AlertDialog
				isOpen={isOpen}
				leastDestructiveRef={cancelRef}
				onClose={onClose}
				isCentered
			>
				<AlertDialogOverlay>
					<AlertDialogContent mx={4}>
						<AlertDialogHeader fontSize="lg" fontWeight="bold">
							Are you sure?
						</AlertDialogHeader>

						<AlertDialogFooter>
							<Button ref={cancelRef} onClick={onClose}>
								Cancel
							</Button>
							<Button colorScheme="red" onClick={handleReset} ml={3}>
								Reset
							</Button>
						</AlertDialogFooter>
					</AlertDialogContent>
				</AlertDialogOverlay>
			</AlertDialog>
		</>
	);
};

export default Home;
